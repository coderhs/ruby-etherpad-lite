= Etherpad Lite Ruby Client

etherpad-lite is a Ruby client for Etherpad Lite's HTTP JSON API. Etherpad Lite is a collaborative editor provided by the Etherpad Foundation (http://etherpad.org).

See https://github.com/Pita/etherpad-lite for information on how to install and configure your own Etherpad Lite instance, and read https://github.com/Pita/etherpad-lite/wiki/HTTP-API for an in-depth description of Etherpad Lite's HTTP API.

== 1 Installation
    gem install etherpad-lite

== 2 Basic usage
    require 'etherpad-lite'

    # Connect to your Etherpad Lite instance (passing no arguments will connect you to beta.etherpad.org)
    ether = EtherpadLite.connect('http://etherpad-lite.example.com', 'your api key')

    # Get a Pad (or create one if it doesn't exist)
    pad = ether.pad('my first etherpad lite pad')

    puts pad.text
    => "Welcome to Etherpad Lite!\n\nThis pad text is synchronized as you type, so that everyone viewing..."

    # Write your the changes to the Pad
    pad.text = "What hath God wrought?"

    # There are now 2 revisions!
    puts pad.revison_numbers.size
    => 2

    # Iterate through each revision
    pad.revisions.each do |pad_rev|
      puts pad_rev.rev
      puts pad_rev.text
    end

For advanced functionality (i.e. Groups, Authors, Sessions), read the full docs at http://jordanhollinger.com/docs/ruby-etherpad-lite/. Also, the RSpec tests under /spec may provide some pointers.

== 3 Why is the Ruby client so different from the others? What gives you the right?!?
The PHP and Python clients are extremely thin wrappers of the HTTP API; their method names map directly to urls. The Ruby client offers a slightly higher level of abstration,
with the goal of making Etherpad Lite integration in Ruby projects as simple, poweful, and dare I say fun, as possible.

That said, there is certainly value in supporting the defacto standard set by the PHP and Python clients. With that in mind, the Ruby client is written in two layers, 
one conforming to the other clients, and a higher-level "models" API riding on top of it.

In the examples above, the "traditional" client can be accessed with
    client = ether.client
    client.getText('my first etherpad lite pad')
    => {:text => "What hath God wrought?"}

Or you can explicitly load only the standard client
    require 'etherpad-lite/client'
    client = EtherpadLite::Client.new('api key', 'http://beta.etherpad.org/api')

== 4 License
Copyright 2011 Jordan Hollinger
Licensed under the Apache License

== 5 Credit
This Ruby client was inspired by TomNomNom's and devjones's PHP and Python clients, found at https://github.com/TomNomNom/etherpad-lite-client and https://github.com/devjones/PyEtherpadLite.
